# librariesimport pandas as pdimport numpy as npimport osimport matplotlib.pyplot as pltfrom scipy.stats import chi2_contingency, fisher_exactfrom statsmodels.stats.contingency_tables import Table2x2#--------------------------------------------# helper function#--------------------------------------------# parous encodingdef encode_parous(parous_value):    if parous_value == 0:        return 'Nulliparous'    else:        return 'Multiparous'# save plotdef save_plot(plot_folder, plot_name="plot.png"):    file_path = os.path.join(plot_folder, plot_name)    plt.savefig(file_path, bbox_inches='tight')    print(f"Plot saved to {file_path}")# add percent lables to plotdef add_percentage_labels(ax):    for container in ax.containers:        ax.bar_label(container, fmt='%.2f%%', label_type='edge')# odds ratiodef run_tests(df, target_column):    # Create the contingency table    contingency_table = pd.crosstab(df['PAROUS_ENCODED_BINARY'], df[target_column])    # Initialize results    chi2_p_value = None    fisher_p_value = None    odds_ratio = None    ci_low = None    ci_high = None    # If the expected frequencies are all greater than 5, run the Chi-Square test    if (contingency_table.values >= 5).all():        _, chi2_p_value, _, _ = chi2_contingency(contingency_table)    else:        # Otherwise, run Fisher's Exact Test        fisher_p_value = fisher_exact(contingency_table)[1]    # Calculate the odds ratio and confidence interval using Table2x2    if contingency_table.shape == (2, 2):        table = Table2x2(contingency_table.values)        odds_ratio = table.oddsratio        ci_low, ci_high = table.oddsratio_confint()        ct_p_value = table.oddsratio_pvalue()    return chi2_p_value, ct_p_value, odds_ratio, ci_low, ci_high# plot odds ratiodef plot_odds_ratios(results_df, target_columns, plot_title):    odds_ratios = results_df['Odds Ratio']    ci_lower = results_df['95% CI Lower']    ci_upper = results_df['95% CI Upper']    # Calculate error bars (distance from odds ratio to lower and upper CI)    lower_error = odds_ratios - ci_lower    upper_error = ci_upper - odds_ratios    error = [lower_error, upper_error]    # Create the plot    plt.figure(figsize=(10, 6))    plt.errorbar(target_columns, odds_ratios, yerr=error, fmt='o', capsize=5, capthick=2, elinewidth=2, marker='s', markersize=5)    plt.axhline(1, color='gray', linestyle='--')  # Reference line at OR = 1    plt.xticks(rotation=90)    plt.xlabel('Target Columns')    plt.ylabel('Odds Ratio with 95% CI')    plt.title(plot_title)    plt.tight_layout()    plt.show()