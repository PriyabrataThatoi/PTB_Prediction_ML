# librariesimport pandas as pdimport numpy as npimport matplotlib.pyplot as pltfrom helpers import save_plot,add_percentage_labels,run_tests,plot_odds_ratiosimport os#--------------------------------------------# variable definition#--------------------------------------------plot_folder = './plots'src_folder = './res'target_columns=['TERM','preterm_lscs','preterm_nvd',       'late_preterm', 'mod_preterm', 'very_preterm', 'ext_preterm',        'late_preterm_lscs', 'mod_preterm_lscs', 'very_preterm_lscs', 'ext_preterm_lscs',        'late_preterm_nvd', 'mod_preterm_nvd', 'very_preterm_nvd', 'ext_preterm_nvd' ]preterm_lscs_subdivisions = ['Late PTB (LSCS)','Moderate PTB (LSCS)','Very PTB (LSCS)','Extreme PTB (LSCS)']preterm_nvd_subdivisions = ['Late PTB (NVD)','Moderate PTB (NVD)','Very PTB (NVD)','Extreme PTB (NVD)']total_preterm_columns = ['PTB (LSCS)','PTB (NVD)']target_columns_new = preterm_lscs_subdivisions + preterm_nvd_subdivisions + total_preterm_columnslabel_mapping = {    'preterm_nvd': 'PTB (NVD)',    'late_preterm_nvd': 'Late PTB (NVD)',    'mod_preterm_nvd': 'Moderate PTB (NVD)',    'very_preterm_nvd': 'Very PTB (NVD)',    'ext_preterm_nvd': 'Extreme PTB (NVD)',    'preterm_lscs': 'PTB (LSCS)',    'late_preterm_lscs': 'Late PTB (LSCS)',    'mod_preterm_lscs': 'Moderate PTB (LSCS)',    'very_preterm_lscs': 'Very PTB (LSCS)',    'ext_preterm_lscs': 'Extreme PTB (LSCS)'}custom_labels = ['Late PTB', 'Moderate PTB', 'Very PTB', 'Extreme PTB', 'PTB']results = []df = pd.read_csv(src_folder+ '/imputed_ptb_risk_file.csv')print(f'current data shape {df.shape}')df = df.rename(columns=label_mapping)df['PAROUS_ENCODED_BINARY'] = df['PAROUS_ENCODED'].map({'Multiparous': 1, 'Nulliparous': 0})#--------------------------------------------# parous vs preterm distribution#--------------------------------------------preterm_lscs_nvd_distribution = df.groupby('PAROUS_ENCODED')[total_preterm_columns + preterm_lscs_subdivisions + preterm_nvd_subdivisions].sum()preterm_lscs_nvd_percentage = preterm_lscs_nvd_distribution.div(preterm_lscs_nvd_distribution.sum(axis=1), axis=0) * 100fig, axes = plt.subplots(1, 2, figsize=(10, 6))# Plot for LSCS percentage distribution without NVD outcomeslscs_plot = preterm_lscs_nvd_percentage[total_preterm_columns[:1] + preterm_lscs_subdivisions].plot(    kind='barh', stacked=False, ax=axes[0], color=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0'])axes[0].set_title("Preterm LSCS and Subdivisions (Percentage)")axes[0].set_xlabel("Percentage (%)")axes[0].set_ylabel("Parous Category")axes[0].tick_params(axis='y', labelrotation=90)add_percentage_labels(axes[0])# Plot for NVD percentage distribution without LSCS outcomesnvd_plot = preterm_lscs_nvd_percentage[total_preterm_columns[1:2] + preterm_nvd_subdivisions].plot(    kind='barh', stacked=False, ax=axes[1], color=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0'])axes[1].set_title("Preterm NVD and Subdivisions (Percentage)")axes[1].set_xlabel("Percentage (%)")axes[1].set_ylabel("Parous Category")axes[1].tick_params(axis='y', labelrotation=90)axes[0].get_legend().remove()axes[1].get_legend().remove()# Add percentage labels to NVD plotadd_percentage_labels(axes[1])# Move the legend to the bottom, making it horizontalhandles, labels = axes[1].get_legend_handles_labels()fig.legend(handles, custom_labels, loc='lower center', bbox_to_anchor=(0.5, -0.05), ncol=5)save_plot(plot_folder, "parity_vs_preterm_dist.png")plt.tight_layout()plt.subplots_adjust(bottom=0.2)plt.show()#--------------------------------------------# parous vs preterm distribution#--------------------------------------------for col in target_columns_new:    chi2_p_value, ct_p_value, odds_ratio, ci_low, ci_high = run_tests(df, col)    results.append({        'Target Column': col,        'Chi-Square P-value': chi2_p_value,        'Odds P-value': ct_p_value,        'Odds Ratio': odds_ratio,        '95% CI Lower': ci_low,        '95% CI Upper': ci_high    })results_df = pd.DataFrame(results)# Separate LSCS and NVD related columns for plottinglscs_columns = [col for col in preterm_lscs_subdivisions + total_preterm_columns if '(LSCS)' in col]nvd_columns = [col for col in preterm_nvd_subdivisions + total_preterm_columns  if '(NVD)' in col]# Plot for LSCS-related columnslscs_data = results_df[results_df['Target Column'].isin(lscs_columns)]odds_ratios = results_df['Odds Ratio']ci_lower = results_df['95% CI Lower']ci_upper = results_df['95% CI Upper']# Calculate error bars (distance from odds ratio to lower and upper CI)lower_error = odds_ratios - ci_lowerupper_error = ci_upper - odds_ratioserror = [lower_error, upper_error]# Create the plotplt.figure(figsize=(10, 6))plt.errorbar(target_columns, odds_ratios, yerr=error, fmt='o', capsize=5, capthick=2, elinewidth=2, marker='s', markersize=5)plt.axhline(1, color='gray', linestyle='--')  # Reference line at OR = 1plt.xticks(rotation=90)plt.xlabel('Target Columns')plt.ylabel('Odds Ratio with 95% CI')plt.title(plot_title)save_plot(plot_folder, "LSCS Odds.png")plt.tight_layout()# Plot for NVD-related columnsnvd_data = results_df[results_df['Target Column'].isin(nvd_columns)]# Create the plotplt.figure(figsize=(10, 6))plt.errorbar(target_columns, odds_ratios, yerr=error, fmt='o', capsize=5, capthick=2, elinewidth=2, marker='s', markersize=5)plt.axhline(1, color='gray', linestyle='--')  # Reference line at OR = 1plt.xticks(rotation=90)plt.xlabel('Target Columns')plt.ylabel('Odds Ratio with 95% CI')plt.title(plot_title)save_plot(plot_folder, "NVD Odds.png")plt.tight_layout()