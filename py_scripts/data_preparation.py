# librariesimport pandas as pdimport numpy as npimport matplotlib.pyplot as pltpd.set_option('display.max_rows', None)pd.set_option('display.max_columns', None)import pandas as pdfrom sklearn.linear_model import LinearRegressionfrom sklearn.model_selection import train_test_splitfrom helpers import encode_parousimport osimport warningswarnings.filterwarnings("ignore")#--------------------------------------------# variable definition#--------------------------------------------missing_val_columns=['MT_WEIGHT (KG)', 'MT_HEIGHT (CM)','MT_AGE (YEARS)',                     'PAROUS','HB','E.F.W', 'FHR', 'AFI', 'Grade', 'Cervix (cm)','Preeclampsia']int_cols = ['MT_WEIGHT (KG)', 'MT_HEIGHT (CM)','MT_AGE (YEARS)',                     'PAROUS','Grade','Preeclampsia','E.F.W', 'FHR']idvs = ['MT_WEIGHT (KG)', 'MT_AGE (YEARS)','MT_HEIGHT (CM)',        'PAROUS', 'PRVS_LSCS', 'HYPOTHYROIDISM',        'IVF/IUI', 'PPROM', 'OLIOGOHYDRAMNIOS', 'Abortion', 'HB',       'Preeclampsia', 'E.F.W', 'FHR', 'AFI', 'Grade', 'Cervix (cm)',       'Anterior Placenta', 'Posterior Placenta', 'Fundal Placenta',       'Lateral Placenta', 'Right Lateral Posterior Placenta',       'Fundo-Anterior Placenta', 'Fundo-Posterior Placenta', 'Separation',       'Transverse Position', 'Cephalic Position', 'Breech Position','Planceta_PREVIA',       'Hypertension','IUGR',       'APH', 'ANEMIA', 'iugr_pp_aph_anemia']controls=[        'caste_general_HINDU', 'caste_OBC_HINDU',       'caste_SC_HINDU', 'caste_SEBC_HINDU',        'caste_ST_HINDU', 'caste_MUSLIM',        'Education_Undergraduate_Degree',       'Education_Medical_Specialization', 'Education_Postgraduate_Degree',       'Education_Others', 'Education_Doctorate_Degree',       'Education_Basic_Education', 'Education_Engineering_Specialization',       'Education_Diploma_Certificate',        ] #shouldn't contain target columnstarget_columns=['TERM','preterm_lscs','preterm_nvd',       'late_preterm', 'mod_preterm', 'very_preterm', 'ext_preterm',        'late_preterm_lscs', 'mod_preterm_lscs', 'very_preterm_lscs', 'ext_preterm_lscs',        'late_preterm_nvd', 'mod_preterm_nvd', 'very_preterm_nvd', 'ext_preterm_nvd' ]plot_folder = './plots'#--------------------------------------------# read file#--------------------------------------------df = pd.read_csv('/Users/pthatoi/PycharmProjects/PTB_Prediction_ML/scripts/preimputed_ptb_risk_file.csv')print(f'data shape:{df.shape}')#--------------------------------------------# filter: Singleton (exclude postterms)#--------------------------------------------df = df.query(" (MT_BABIES_COUNT == 1) and (TERM != -1)")print(f"singleton & preterm sample: {df.shape}")#--------------------------------------------# missing columns from idvs#--------------------------------------------print(f"missing row count (preimputation): {df[idvs + controls ].isna().sum().sum()}")df['Preeclampsia'][df['Preeclampsia']=='#VALUE!']=np.nan #replace garbage to NaNdf['Abortion'][df['Abortion']=='1L0'] = 1df['HB'][df['HB']=='10..2'] = 10.2df['HB'][df['HB']=='11..9'] = 11.9df['HB'][df['HB']=='10 .1'] = 10.1df_impute=df[idvs + controls].copy()for col in missing_val_columns:        df_missing = df_impute[df_impute[col].isnull()]        df_not_missing = df_impute[df_impute[col].notnull()]        # Features (X) and target (y)        X = df_not_missing.drop(columns=missing_val_columns)  # Exclude the missing column        y = df_not_missing[col]        # Step 4: Train a regression model        model = LinearRegression()        model.fit(X, y)        # Step 5: Predict the missing values        X_missing = df_missing.drop(columns=missing_val_columns)  # Exclude the missing column        predicted_values = model.predict(X_missing)        # Fill in the missing values        if col in int_cols:            df.loc[df[col].isnull(), col] = predicted_values            df[col] = df[col].astype(int)        else:            df.loc[df[col].isnull(), col] = predicted_values            df[col] = df[col].astype(float)            df[col] = df[col].round(1)#--------------------------------------------# concatenate to final file#--------------------------------------------# df_impute=pd.concat([df[ ['SL.NO'] + target_columns + ['GA_Extracted(weeks)'] ],df_impute],axis=1)print(f'post imputation null count:{df[missing_val_columns].isna().sum().sum()}')print(f'post imputation shape:{df.shape}')#--------------------------------------------# handling negative predicted values#--------------------------------------------for col in missing_val_columns:    min_value = df[col][df[col] > 0].min()    df[col] = df[col].apply(lambda x: min_value if x < 0 else x)  # Replace negative values#--------------------------------------------# feature engineering#--------------------------------------------df['BMI'] = round(df['MT_WEIGHT (KG)'] / ((df['MT_HEIGHT (CM)']/100)**2))df['late_preterm'] = df['GA_Extracted(weeks)'].apply(lambda x: 1 if 34 <= x < 37 else 0)df['mod_preterm'] = df['GA_Extracted(weeks)'].apply(lambda x: 1 if 32 <= x < 34 else 0)df['very_preterm'] = df['GA_Extracted(weeks)'].apply(lambda x: 1 if 28 <= x < 32 else 0)df['ext_preterm'] = df['GA_Extracted(weeks)'].apply(lambda x: 1 if x < 28 else 0)df['PAROUS_ENCODED'] = df['PAROUS'].apply(encode_parous)#--------------------------------------------# target engineering#--------------------------------------------df['late_preterm_lscs'] = np.where((df['late_preterm'] == 1) & (df['METHOD-VD/CS'] == 'LSCS'), 1, 0)df['mod_preterm_lscs'] = np.where((df['mod_preterm'] == 1) & (df['METHOD-VD/CS'] == 'LSCS'), 1, 0)df['very_preterm_lscs'] = np.where((df['very_preterm'] == 1) & (df['METHOD-VD/CS'] == 'LSCS'), 1, 0)df['ext_preterm_lscs'] = np.where((df['ext_preterm'] == 1) & (df['METHOD-VD/CS'] == 'LSCS'), 1, 0)df['late_preterm_nvd'] = np.where((df['late_preterm'] == 1) & (df['METHOD-VD/CS'] != 'LSCS'), 1, 0)df['mod_preterm_nvd'] = np.where((df['mod_preterm'] == 1) & (df['METHOD-VD/CS'] != 'LSCS'), 1, 0)df['very_preterm_nvd'] = np.where((df['very_preterm'] == 1) & (df['METHOD-VD/CS'] != 'LSCS'), 1, 0)df['ext_preterm_nvd'] = np.where((df['ext_preterm'] == 1) & (df['METHOD-VD/CS'] != 'LSCS'), 1, 0)final_col_list = ['SL.NO'] + idvs + ['BMI','PAROUS_ENCODED'] + controls + target_columns +['METHOD-VD/CS']#--------------------------------------------# save file as csv#--------------------------------------------df[final_col_list].to_csv('res/imputed_ptb_risk_file.csv', index=False)print(f'final file shape:{df[final_col_list].shape}')print('file saved as csv')